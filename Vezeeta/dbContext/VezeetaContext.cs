// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Vezeeta.Models;

namespace Vezeeta.dbContext
{
    public partial class VezeetaContext : DbContext
    {
        //public VezeetaContext()
        //{
        //}

        public VezeetaContext(DbContextOptions<VezeetaContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Clinic> Clinics { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<Doctors_Phone> Doctors_Phones { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<Patient_Appoinment> Patient_Appoinments { get; set; }
        public virtual DbSet<Prescription> Prescriptions { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Review> Reviews { get; set; }
        public virtual DbSet<Specialization> Specializations { get; set; }

//        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//        {
//            if (!optionsBuilder.IsConfigured)
//            {
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
//                optionsBuilder.UseSqlServer("Data Source=DESKTOP-VUVK6O7\\SQL2017;Initial Catalog=Vezeeta;Integrated Security=True");
//            }
//        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Address>(entity =>
            {
                entity.HasOne(d => d.clinic)
                    .WithMany(p => p.Addresses)
                    .HasForeignKey(d => d.clinic_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Addresses_Cities");

                entity.HasOne(d => d.clinicNavigation)
                    .WithMany(p => p.Addresses)
                    .HasForeignKey(d => d.clinic_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Addresses_Clinics");
            });

            modelBuilder.Entity<Answer>(entity =>
            {
                entity.HasKey(e => new { e.Dr_id, e.Q_id });

                entity.HasOne(d => d.Dr)
                    .WithMany(p => p.Answers)
                    .HasForeignKey(d => d.Dr_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Answers_Doctors");

                entity.HasOne(d => d.Q_idNavigation)
                    .WithMany(p => p.Answers)
                    .HasForeignKey(d => d.Q_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Answers_Questions");
            });

            modelBuilder.Entity<Appointment>(entity =>
            {
                entity.HasKey(e => new { e.Dr_id, e.appoint_id });

                entity.HasOne(d => d.Dr)
                    .WithMany(p => p.Appointments)
                    .HasForeignKey(d => d.Dr_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Appointments_Doctors");

                entity.HasOne(d => d.appoint)
                    .WithMany(p => p.Appointments)
                    .HasForeignKey(d => d.appoint_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Appointments_Patient_Appoinment");
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.HasOne(d => d.region)
                    .WithMany(p => p.Cities)
                    .HasForeignKey(d => d.region_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cities_Regions");
            });

            modelBuilder.Entity<Doctor>(entity =>
            {
                entity.Property(e => e.gender).IsFixedLength();

                entity.HasOne(d => d.id_specializeNavigation)
                    .WithMany(p => p.Doctors)
                    .HasForeignKey(d => d.id_specialize)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Doctors_Specializations");

                entity.HasMany(d => d.clinics)
                    .WithMany(p => p.Drs)
                    .UsingEntity<Dictionary<string, object>>(
                        "Clinic_Doctor",
                        l => l.HasOne<Clinic>().WithMany().HasForeignKey("clinic_id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Clinic_Doctor_Clinics"),
                        r => r.HasOne<Doctor>().WithMany().HasForeignKey("Dr_id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Clinic_Doctor_Doctors"),
                        j =>
                        {
                            j.HasKey("Dr_id", "clinic_id");

                            j.ToTable("Clinic_Doctor");
                        });
            });

            modelBuilder.Entity<Doctors_Phone>(entity =>
            {
                entity.HasKey(e => new { e.phone, e.Dr_id });

                entity.HasOne(d => d.Dr)
                    .WithMany(p => p.Doctors_Phones)
                    .HasForeignKey(d => d.Dr_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Doctors_Phones_Doctors");
            });

            modelBuilder.Entity<Patient_Appoinment>(entity =>
            {
                entity.HasOne(d => d.patient)
                    .WithMany(p => p.Patient_Appoinments)
                    .HasForeignKey(d => d.patient_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Patient_Appoinment_Patients");
            });

            modelBuilder.Entity<Prescription>(entity =>
            {
                entity.HasKey(e => new { e.Dr_id, e.patient_id });

                entity.HasOne(d => d.Dr)
                    .WithMany(p => p.Prescriptions)
                    .HasForeignKey(d => d.Dr_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Prescriptions_Doctors");

                entity.HasOne(d => d.patient)
                    .WithMany(p => p.Prescriptions)
                    .HasForeignKey(d => d.patient_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Prescriptions_Patients");
            });

            modelBuilder.Entity<Question>(entity =>
            {
                entity.HasOne(d => d.patient)
                    .WithMany(p => p.Questions)
                    .HasForeignKey(d => d.patient_id)
                    .HasConstraintName("FK_Questions_Patients");

                entity.HasOne(d => d.spec)
                    .WithMany(p => p.Questions)
                    .HasForeignKey(d => d.spec_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Questions_Specializations");
            });

            modelBuilder.Entity<Review>(entity =>
            {
                entity.HasKey(e => new { e.Dr_id, e.patient_id });

                entity.HasOne(d => d.Dr)
                    .WithMany(p => p.Reviews)
                    .HasForeignKey(d => d.Dr_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reviews_Doctors");

                entity.HasOne(d => d.patient)
                    .WithMany(p => p.Reviews)
                    .HasForeignKey(d => d.patient_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reviews_Patients");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}